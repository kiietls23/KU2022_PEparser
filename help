Help on module pefile:

NAME
    pefile - pefile, Portable Executable reader module

DESCRIPTION
    All the PE file basic structures are available with their default names as
    attributes of the instance returned.
    
    Processed elements such as the import table are made available with lowercase
    names, to differentiate them from the upper case basic structure names.
    
    pefile has been tested against many edge cases such as corrupted and malformed
    PEs as well as malware, which often attempts to abuse the format way beyond its
    standard use. To the best of my knowledge most of the abuse is handled
    gracefully.
    
    Copyright (c) 2005-2022 Ero Carrera <ero.carrera@gmail.com>

CLASSES
    builtins.Exception(builtins.BaseException)
        PEFormatError
    builtins.object
        DataContainer
            BaseRelocationData
            BoundImportDescData
            BoundImportRefData
            DebugData
            ExceptionsDirEntryData
            ExportData
            ExportDirData
            ImportData
            ImportDescData
            LoadConfigData
            RelocationData
            ResourceDataEntryData
            ResourceDirData
            ResourceDirEntryData
            TlsData
        Dump
        PE
        PrologEpilogOp
            PrologEpilogOpAllocLarge
            PrologEpilogOpAllocSmall
            PrologEpilogOpEpilogMarker
            PrologEpilogOpPushFrame
            PrologEpilogOpPushReg
            PrologEpilogOpSaveReg
            PrologEpilogOpSaveRegFar
            PrologEpilogOpSaveXMM
            PrologEpilogOpSaveXMMFar
            PrologEpilogOpSetFP
        PrologEpilogOpsFactory
        Structure
            SectionStructure
            StructureWithBitfields
                UnwindInfo
        UnicodeStringWrapperPostProcessor
    builtins.set(builtins.object)
        AddressSet
    
    class AddressSet(builtins.set)
     |  Method resolution order:
     |      AddressSet
     |      builtins.set
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  add(self, value)
     |      Add an element to a set.
     |      
     |      This has no effect if the element is already present.
     |  
     |  diff(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.set:
     |  
     |  __and__(self, value, /)
     |      Return self&value.
     |  
     |  __contains__(...)
     |      x.__contains__(y) <==> y in x.
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __iand__(self, value, /)
     |      Return self&=value.
     |  
     |  __ior__(self, value, /)
     |      Return self|=value.
     |  
     |  __isub__(self, value, /)
     |      Return self-=value.
     |  
     |  __iter__(self, /)
     |      Implement iter(self).
     |  
     |  __ixor__(self, value, /)
     |      Return self^=value.
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __len__(self, /)
     |      Return len(self).
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __or__(self, value, /)
     |      Return self|value.
     |  
     |  __rand__(self, value, /)
     |      Return value&self.
     |  
     |  __reduce__(...)
     |      Return state information for pickling.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __ror__(self, value, /)
     |      Return value|self.
     |  
     |  __rsub__(self, value, /)
     |      Return value-self.
     |  
     |  __rxor__(self, value, /)
     |      Return value^self.
     |  
     |  __sizeof__(...)
     |      S.__sizeof__() -> size of S in memory, in bytes
     |  
     |  __sub__(self, value, /)
     |      Return self-value.
     |  
     |  __xor__(self, value, /)
     |      Return self^value.
     |  
     |  clear(...)
     |      Remove all elements from this set.
     |  
     |  copy(...)
     |      Return a shallow copy of a set.
     |  
     |  difference(...)
     |      Return the difference of two or more sets as a new set.
     |      
     |      (i.e. all elements that are in this set but not the others.)
     |  
     |  difference_update(...)
     |      Remove all elements of another set from this set.
     |  
     |  discard(...)
     |      Remove an element from a set if it is a member.
     |      
     |      If the element is not a member, do nothing.
     |  
     |  intersection(...)
     |      Return the intersection of two sets as a new set.
     |      
     |      (i.e. all elements that are in both sets.)
     |  
     |  intersection_update(...)
     |      Update a set with the intersection of itself and another.
     |  
     |  isdisjoint(...)
     |      Return True if two sets have a null intersection.
     |  
     |  issubset(...)
     |      Report whether another set contains this set.
     |  
     |  issuperset(...)
     |      Report whether this set contains another set.
     |  
     |  pop(...)
     |      Remove and return an arbitrary set element.
     |      Raises KeyError if the set is empty.
     |  
     |  remove(...)
     |      Remove an element from a set; it must be a member.
     |      
     |      If the element is not a member, raise a KeyError.
     |  
     |  symmetric_difference(...)
     |      Return the symmetric difference of two sets as a new set.
     |      
     |      (i.e. all elements that are in exactly one of the sets.)
     |  
     |  symmetric_difference_update(...)
     |      Update a set with the symmetric difference of itself and another.
     |  
     |  union(...)
     |      Return the union of sets as a new set.
     |      
     |      (i.e. all elements that are in either set.)
     |  
     |  update(...)
     |      Update a set with the union of itself and others.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.set:
     |  
     |  __class_getitem__(...) from builtins.type
     |      See PEP 585
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.set:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from builtins.set:
     |  
     |  __hash__ = None
    
    class BaseRelocationData(DataContainer)
     |  BaseRelocationData(**args)
     |  
     |  Holds base relocation information.
     |  
     |  struct:     IMAGE_BASE_RELOCATION structure
     |  entries:    list of relocation data (RelocationData instances)
     |  
     |  Method resolution order:
     |      BaseRelocationData
     |      DataContainer
     |      builtins.object
     |  
     |  Methods inherited from DataContainer:
     |  
     |  __init__(self, **args)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from DataContainer:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class BoundImportDescData(DataContainer)
     |  BoundImportDescData(**args)
     |  
     |  Holds bound import descriptor data.
     |  
     |  This directory entry will provide information on the
     |  DLLs this PE file has been bound to (if bound at all).
     |  The structure will contain the name and timestamp of the
     |  DLL at the time of binding so that the loader can know
     |  whether it differs from the one currently present in the
     |  system and must, therefore, re-bind the PE's imports.
     |  
     |  struct:     IMAGE_BOUND_IMPORT_DESCRIPTOR structure
     |  name:       DLL name
     |  entries:    list of entries (BoundImportRefData instances)
     |              the entries will exist if this DLL has forwarded
     |              symbols. If so, the destination DLL will have an
     |              entry in this list.
     |  
     |  Method resolution order:
     |      BoundImportDescData
     |      DataContainer
     |      builtins.object
     |  
     |  Methods inherited from DataContainer:
     |  
     |  __init__(self, **args)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from DataContainer:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class BoundImportRefData(DataContainer)
     |  BoundImportRefData(**args)
     |  
     |  Holds bound import forwarder reference data.
     |  
     |  Contains the same information as the bound descriptor but
     |  for forwarded DLLs, if any.
     |  
     |  struct:     IMAGE_BOUND_FORWARDER_REF structure
     |  name:       dll name
     |  
     |  Method resolution order:
     |      BoundImportRefData
     |      DataContainer
     |      builtins.object
     |  
     |  Methods inherited from DataContainer:
     |  
     |  __init__(self, **args)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from DataContainer:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class DataContainer(builtins.object)
     |  DataContainer(**args)
     |  
     |  Generic data container.
     |  
     |  Methods defined here:
     |  
     |  __init__(self, **args)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class DebugData(DataContainer)
     |  DebugData(**args)
     |  
     |  Holds debug information.
     |  
     |  struct:     IMAGE_DEBUG_DIRECTORY structure
     |  entries:    list of entries (IMAGE_DEBUG_TYPE instances)
     |  
     |  Method resolution order:
     |      DebugData
     |      DataContainer
     |      builtins.object
     |  
     |  Methods inherited from DataContainer:
     |  
     |  __init__(self, **args)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from DataContainer:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class Dump(builtins.object)
     |  Convenience class for dumping the PE information.
     |  
     |  Methods defined here:
     |  
     |  __init__(self)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  add(self, txt, indent=0)
     |      Adds some text, no newline will be appended.
     |      
     |      The text can be indented with the optional argument 'indent'.
     |  
     |  add_header(self, txt)
     |      Adds a header element.
     |  
     |  add_line(self, txt, indent=0)
     |      Adds a line.
     |      
     |      The line can be indented with the optional argument 'indent'.
     |  
     |  add_lines(self, txt, indent=0)
     |      Adds a list of lines.
     |      
     |      The list can be indented with the optional argument 'indent'.
     |  
     |  add_newline(self)
     |      Adds a newline.
     |  
     |  get_text(self)
     |      Get the text in its current state.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class ExceptionsDirEntryData(DataContainer)
     |  ExceptionsDirEntryData(**args)
     |  
     |  Holds the data related to SEH (and stack unwinding, in particular)
     |  
     |  struct      an instance of RUNTIME_FUNTION
     |  unwindinfo  an instance of UNWIND_INFO
     |  
     |  Method resolution order:
     |      ExceptionsDirEntryData
     |      DataContainer
     |      builtins.object
     |  
     |  Methods inherited from DataContainer:
     |  
     |  __init__(self, **args)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from DataContainer:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class ExportData(DataContainer)
     |  ExportData(**args)
     |  
     |  Holds exported symbols' information.
     |  
     |  ordinal:    ordinal of the symbol
     |  address:    address of the symbol
     |  name:       name of the symbol (None if the symbol is
     |              exported by ordinal only)
     |  forwarder:  if the symbol is forwarded it will
     |              contain the name of the target symbol,
     |              None otherwise.
     |  
     |  Method resolution order:
     |      ExportData
     |      DataContainer
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __setattr__(self, name, val)
     |      Implement setattr(self, name, value).
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from DataContainer:
     |  
     |  __init__(self, **args)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from DataContainer:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class ExportDirData(DataContainer)
     |  ExportDirData(**args)
     |  
     |  Holds export directory information.
     |  
     |  struct:     IMAGE_EXPORT_DIRECTORY structure
     |  symbols:    list of exported symbols (ExportData instances)
     |  
     |  Method resolution order:
     |      ExportDirData
     |      DataContainer
     |      builtins.object
     |  
     |  Methods inherited from DataContainer:
     |  
     |  __init__(self, **args)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from DataContainer:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class ImportData(DataContainer)
     |  ImportData(**args)
     |  
     |  Holds imported symbol's information.
     |  
     |  ordinal:    Ordinal of the symbol
     |  name:       Name of the symbol
     |  bound:      If the symbol is bound, this contains
     |              the address.
     |  
     |  Method resolution order:
     |      ImportData
     |      DataContainer
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __setattr__(self, name, val)
     |      Implement setattr(self, name, value).
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from DataContainer:
     |  
     |  __init__(self, **args)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from DataContainer:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class ImportDescData(DataContainer)
     |  ImportDescData(**args)
     |  
     |  Holds import descriptor information.
     |  
     |  dll:        name of the imported DLL
     |  imports:    list of imported symbols (ImportData instances)
     |  struct:     IMAGE_IMPORT_DESCRIPTOR structure
     |  
     |  Method resolution order:
     |      ImportDescData
     |      DataContainer
     |      builtins.object
     |  
     |  Methods inherited from DataContainer:
     |  
     |  __init__(self, **args)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from DataContainer:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class LoadConfigData(DataContainer)
     |  LoadConfigData(**args)
     |  
     |  Holds Load Config data.
     |  
     |  struct:     IMAGE_LOAD_CONFIG_DIRECTORY structure
     |  name:       dll name
     |  
     |  Method resolution order:
     |      LoadConfigData
     |      DataContainer
     |      builtins.object
     |  
     |  Methods inherited from DataContainer:
     |  
     |  __init__(self, **args)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from DataContainer:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class PE(builtins.object)
     |  PE(name=None, data=None, fast_load=None, max_symbol_exports=8192, max_repeated_symbol=120)
     |  
     |  A Portable Executable representation.
     |  
     |  This class provides access to most of the information in a PE file.
     |  
     |  It expects to be supplied the name of the file to load or PE data
     |  to process and an optional argument 'fast_load' (False by default)
     |  which controls whether to load all the directories information,
     |  which can be quite time consuming.
     |  
     |  pe = pefile.PE('module.dll')
     |  pe = pefile.PE(name='module.dll')
     |  
     |  would load 'module.dll' and process it. If the data is already
     |  available in a buffer the same can be achieved with:
     |  
     |  pe = pefile.PE(data=module_dll_data)
     |  
     |  The "fast_load" can be set to a default by setting its value in the
     |  module itself by means, for instance, of a "pefile.fast_load = True".
     |  That will make all the subsequent instances not to load the
     |  whole PE structure. The "full_load" method can be used to parse
     |  the missing data at a later stage.
     |  
     |  Basic headers information will be available in the attributes:
     |  
     |  DOS_HEADER
     |  NT_HEADERS
     |  FILE_HEADER
     |  OPTIONAL_HEADER
     |  
     |  All of them will contain among their attributes the members of the
     |  corresponding structures as defined in WINNT.H
     |  
     |  The raw data corresponding to the header (from the beginning of the
     |  file up to the start of the first section) will be available in the
     |  instance's attribute 'header' as a string.
     |  
     |  The sections will be available as a list in the 'sections' attribute.
     |  Each entry will contain as attributes all the structure's members.
     |  
     |  Directory entries will be available as attributes (if they exist):
     |  (no other entries are processed at this point)
     |  
     |  DIRECTORY_ENTRY_IMPORT (list of ImportDescData instances)
     |  DIRECTORY_ENTRY_EXPORT (ExportDirData instance)
     |  DIRECTORY_ENTRY_RESOURCE (ResourceDirData instance)
     |  DIRECTORY_ENTRY_DEBUG (list of DebugData instances)
     |  DIRECTORY_ENTRY_BASERELOC (list of BaseRelocationData instances)
     |  DIRECTORY_ENTRY_TLS
     |  DIRECTORY_ENTRY_BOUND_IMPORT (list of BoundImportData instances)
     |  
     |  The following dictionary attributes provide ways of mapping different
     |  constants. They will accept the numeric value and return the string
     |  representation and the opposite, feed in the string and get the
     |  numeric constant:
     |  
     |  DIRECTORY_ENTRY
     |  IMAGE_CHARACTERISTICS
     |  SECTION_CHARACTERISTICS
     |  DEBUG_TYPE
     |  SUBSYSTEM_TYPE
     |  MACHINE_TYPE
     |  RELOCATION_TYPE
     |  RESOURCE_TYPE
     |  LANG
     |  SUBLANG
     |  
     |  Methods defined here:
     |  
     |  __enter__(self)
     |  
     |  __exit__(self, type, value, traceback)
     |  
     |  __init__(self, name=None, data=None, fast_load=None, max_symbol_exports=8192, max_repeated_symbol=120)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __parse__(self, fname, data, fast_load)
     |      Parse a Portable Executable file.
     |      
     |      Loads a PE file, parsing all its structures and making them available
     |      through the instance's attributes.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  __unpack_data__(self, format, data, file_offset)
     |      Apply structure format to raw data.
     |      
     |      Returns an unpacked structure object if successful, None otherwise.
     |  
     |  adjust_FileAlignment(self, val, file_alignment)
     |      # According to http://corkami.blogspot.com/2010/01/parce-que-la-planche-aura-brule.html
     |      # if PointerToRawData is less that 0x200 it's rounded to zero. Loading the test file
     |      # in a debugger it's easy to verify that the PointerToRawData value of 1 is rounded
     |      # to zero. Hence we reproduce the behavior
     |      #
     |      # According to the document:
     |      # [ Microsoft Portable Executable and Common Object File Format Specification ]
     |      # "The alignment factor (in bytes) that is used to align the raw data of sections in
     |      #  the image file. The value should be a power of 2 between 512 and 64 K, inclusive.
     |      #  The default is 512. If the SectionAlignment is less than the architecture's page
     |      #  size, then FileAlignment must match SectionAlignment."
     |      #
     |      # The following is a hard-coded constant if the Windows loader
     |  
     |  adjust_SectionAlignment(self, val, section_alignment, file_alignment)
     |      # According to the document:
     |      # [ Microsoft Portable Executable and Common Object File Format Specification ]
     |      # "The alignment (in bytes) of sections when they are loaded into memory. It must be
     |      #  greater than or equal to FileAlignment. The default is the page size for the
     |      #  architecture."
     |  
     |  close(self)
     |  
     |  dump_dict(self)
     |      Dump all the PE header information into a dictionary.
     |  
     |  dump_info(self, dump=None, encoding='ascii')
     |      Dump all the PE header information into human readable string.
     |  
     |  dword_align(self, offset, base)
     |  
     |  full_load(self)
     |      Process the data directories.
     |      
     |      This method will load the data directories which might not have
     |      been loaded if the "fast_load" option was used.
     |  
     |  generate_checksum(self)
     |  
     |  get_bytes_from_data(self, offset, data)
     |      .
     |  
     |  get_data(self, rva=0, length=None)
     |      Get data regardless of the section where it lies on.
     |      
     |      Given a RVA and the size of the chunk to retrieve, this method
     |      will find the section where the data lies and return the data.
     |  
     |  get_data_from_dword(self, dword)
     |      Return a four byte string representing the double word value (little endian).
     |  
     |  get_data_from_qword(self, word)
     |      Return an eight byte string representing the quad-word value (little endian).
     |  
     |  get_data_from_word(self, word)
     |      Return a two byte string representing the word value. (little endian).
     |  
     |  get_dword_at_rva(self, rva)
     |      Return the double word value at the given RVA.
     |      
     |      Returns None if the value can't be read, i.e. the RVA can't be mapped
     |      to a file offset.
     |  
     |  get_dword_from_data(self, data, offset)
     |      Convert four bytes of data to a double word (little endian)
     |      
     |      'offset' is assumed to index into a dword array. So setting it to
     |      N will return a dword out of the data starting at offset N*4.
     |      
     |      Returns None if the data can't be turned into a double word.
     |  
     |  get_dword_from_offset(self, offset)
     |      Return the double word value at the given file offset. (little endian)
     |  
     |  get_imphash(self)
     |  
     |  get_import_table(self, rva, max_length=None, contains_addresses=False)
     |  
     |  get_memory_mapped_image(self, max_virtual_address=268435456, ImageBase=None)
     |      Returns the data corresponding to the memory layout of the PE file.
     |      
     |      The data includes the PE header and the sections loaded at offsets
     |      corresponding to their relative virtual addresses. (the VirtualAddress
     |      section header member).
     |      Any offset in this data corresponds to the absolute memory address
     |      ImageBase+offset.
     |      
     |      The optional argument 'max_virtual_address' provides with means of limiting
     |      which sections are processed.
     |      Any section with their VirtualAddress beyond this value will be skipped.
     |      Normally, sections with values beyond this range are just there to confuse
     |      tools. It's a common trick to see in packed executables.
     |      
     |      If the 'ImageBase' optional argument is supplied, the file's relocations
     |      will be applied to the image by calling the 'relocate_image()' method. Beware
     |      that the relocation information is applied permanently.
     |  
     |  get_offset_from_rva(self, rva)
     |      Get the file offset corresponding to this RVA.
     |      
     |      Given a RVA , this method will find the section where the
     |      data lies and return the offset within the file.
     |  
     |  get_overlay(self)
     |      Get the data appended to the file and not contained within the area described
     |      in the headers.
     |  
     |  get_overlay_data_start_offset(self)
     |      Get the offset of data appended to the file and not contained within
     |      the area described in the headers.
     |  
     |  get_physical_by_rva(self, rva)
     |      Gets the physical address in the PE file from an RVA value.
     |  
     |  get_qword_at_rva(self, rva)
     |      Return the quad-word value at the given RVA.
     |      
     |      Returns None if the value can't be read, i.e. the RVA can't be mapped
     |      to a file offset.
     |  
     |  get_qword_from_data(self, data, offset)
     |      Convert eight bytes of data to a word (little endian)
     |      
     |      'offset' is assumed to index into a word array. So setting it to
     |      N will return a dword out of the data starting at offset N*8.
     |      
     |      Returns None if the data can't be turned into a quad word.
     |  
     |  get_qword_from_offset(self, offset)
     |      Return the quad-word value at the given file offset. (little endian)
     |  
     |  get_resources_strings(self)
     |      Returns a list of all the strings found withing the resources (if any).
     |      
     |      This method will scan all entries in the resources directory of the PE, if
     |      there is one, and will return a [] with the strings.
     |      
     |      An empty list will be returned otherwise.
     |  
     |  get_rich_header_hash(self, algorithm='md5')
     |  
     |  get_rva_from_offset(self, offset)
     |      Get the RVA corresponding to this file offset.
     |  
     |  get_section_by_offset(self, offset)
     |      Get the section containing the given file offset.
     |  
     |  get_section_by_rva(self, rva)
     |      Get the section containing the given address.
     |  
     |  get_string_at_rva(self, rva, max_length=1048576)
     |      Get an ASCII string located at the given address.
     |  
     |  get_string_from_data(self, offset, data)
     |      Get an ASCII string from data.
     |  
     |  get_string_u_at_rva(self, rva, max_length=65536, encoding=None)
     |      Get an Unicode string located at the given address.
     |  
     |  get_warnings(self)
     |      Return the list of warnings.
     |      
     |      Non-critical problems found when parsing the PE file are
     |      appended to a list of warnings. This method returns the
     |      full list.
     |  
     |  get_word_at_rva(self, rva)
     |      Return the word value at the given RVA.
     |      
     |      Returns None if the value can't be read, i.e. the RVA can't be mapped
     |      to a file offset.
     |  
     |  get_word_from_data(self, data, offset)
     |      Convert two bytes of data to a word (little endian)
     |      
     |      'offset' is assumed to index into a word array. So setting it to
     |      N will return a dword out of the data starting at offset N*2.
     |      
     |      Returns None if the data can't be turned into a word.
     |  
     |  get_word_from_offset(self, offset)
     |      Return the word value at the given file offset. (little endian)
     |  
     |  has_relocs(self)
     |      Checks if the PE file has relocation directory
     |  
     |  is_dll(self)
     |      Check whether the file is a standard DLL.
     |      
     |      This will return true only if the image has the IMAGE_FILE_DLL flag set.
     |  
     |  is_driver(self)
     |      Check whether the file is a Windows driver.
     |      
     |      This will return true only if there are reliable indicators of the image
     |      being a driver.
     |  
     |  is_exe(self)
     |      Check whether the file is a standard executable.
     |      
     |      This will return true only if the file has the IMAGE_FILE_EXECUTABLE_IMAGE flag
     |      set and the IMAGE_FILE_DLL not set and the file does not appear to be a driver
     |      either.
     |  
     |  merge_modified_section_data(self)
     |      Update the PE image content with any individual section data that has been
     |      modified.
     |  
     |  normalize_import_va(self, va)
     |  
     |  parse_data_directories(self, directories=None, forwarded_exports_only=False, import_dllnames_only=False)
     |      Parse and process the PE file's data directories.
     |      
     |      If the optional argument 'directories' is given, only
     |      the directories at the specified indexes will be parsed.
     |      Such functionality allows parsing of areas of interest
     |      without the burden of having to parse all others.
     |      The directories can then be specified as:
     |      
     |      For export / import only:
     |      
     |        directories = [ 0, 1 ]
     |      
     |      or (more verbosely):
     |      
     |        directories = [ DIRECTORY_ENTRY['IMAGE_DIRECTORY_ENTRY_IMPORT'],
     |          DIRECTORY_ENTRY['IMAGE_DIRECTORY_ENTRY_EXPORT'] ]
     |      
     |      If 'directories' is a list, the ones that are processed will be removed,
     |      leaving only the ones that are not present in the image.
     |      
     |      If `forwarded_exports_only` is True, the IMAGE_DIRECTORY_ENTRY_EXPORT
     |      attribute will only contain exports that are forwarded to another DLL.
     |      
     |      If `import_dllnames_only` is True, symbols will not be parsed from
     |      the import table and the entries in the IMAGE_DIRECTORY_ENTRY_IMPORT
     |      attribute will not have a `symbols` attribute.
     |  
     |  parse_debug_directory(self, rva, size)
     |  
     |  parse_delay_import_directory(self, rva, size)
     |      Walk and parse the delay import directory.
     |  
     |  parse_directory_bound_imports(self, rva, size)
     |  
     |  parse_directory_load_config(self, rva, size)
     |  
     |  parse_directory_tls(self, rva, size)
     |  
     |  parse_exceptions_directory(self, rva, size)
     |      Parses exception directory
     |      
     |      All the code related to handling exception directories is documented in
     |      https://auscitte.github.io/systems%20blog/Exception-Directory-pefile#implementation-details
     |  
     |  parse_export_directory(self, rva, size, forwarded_only=False)
     |      Parse the export directory.
     |      
     |      Given the RVA of the export directory, it will process all
     |      its entries.
     |      
     |      The exports will be made available as a list of ExportData
     |      instances in the 'IMAGE_DIRECTORY_ENTRY_EXPORT' PE attribute.
     |  
     |  parse_import_directory(self, rva, size, dllnames_only=False)
     |      Walk and parse the import directory.
     |  
     |  parse_imports(self, original_first_thunk, first_thunk, forwarder_chain, max_length=None, contains_addresses=False)
     |      Parse the imported symbols.
     |      
     |      It will fill a list, which will be available as the dictionary
     |      attribute "imports". Its keys will be the DLL names and the values
     |      of all the symbols imported from that object.
     |  
     |  parse_relocations(self, data_rva, rva, size)
     |  
     |  parse_relocations_directory(self, rva, size)
     |  
     |  parse_resource_data_entry(self, rva)
     |      Parse a data entry from the resources directory.
     |  
     |  parse_resource_entry(self, rva)
     |      Parse a directory entry from the resources directory.
     |  
     |  parse_resources_directory(self, rva, size=0, base_rva=None, level=0, dirs=None)
     |      Parse the resources directory.
     |      
     |      Given the RVA of the resources directory, it will process all
     |      its entries.
     |      
     |      The root will have the corresponding member of its structure,
     |      IMAGE_RESOURCE_DIRECTORY plus 'entries', a list of all the
     |      entries in the directory.
     |      
     |      Those entries will have, correspondingly, all the structure's
     |      members (IMAGE_RESOURCE_DIRECTORY_ENTRY) and an additional one,
     |      "directory", pointing to the IMAGE_RESOURCE_DIRECTORY structure
     |      representing upper layers of the tree. This one will also have
     |      an 'entries' attribute, pointing to the 3rd, and last, level.
     |      Another directory with more entries. Those last entries will
     |      have a new attribute (both 'leaf' or 'data_entry' can be used to
     |      access it). This structure finally points to the resource data.
     |      All the members of this structure, IMAGE_RESOURCE_DATA_ENTRY,
     |      are available as its attributes.
     |  
     |  parse_rich_header(self)
     |      Parses the rich header
     |      see http://www.ntcore.com/files/richsign.htm for more information
     |      
     |      Structure:
     |      00 DanS ^ checksum, checksum, checksum, checksum
     |      10 Symbol RVA ^ checksum, Symbol size ^ checksum...
     |      ...
     |      XX Rich, checksum, 0, 0,...
     |  
     |  parse_sections(self, offset)
     |      Fetch the PE file sections.
     |      
     |      The sections will be readily available in the "sections" attribute.
     |      Its attributes will contain all the section information plus "data"
     |      a buffer containing the section's data.
     |      
     |      The "Characteristics" member will be processed and attributes
     |      representing the section characteristics (with the 'IMAGE_SCN_'
     |      string trimmed from the constant's names) will be added to the
     |      section instance.
     |      
     |      Refer to the SectionStructure class for additional info.
     |  
     |  parse_version_information(self, version_struct)
     |      Parse version information structure.
     |      
     |      The date will be made available in three attributes of the PE object.
     |      
     |      VS_VERSIONINFO   will contain the first three fields of the main structure:
     |          'Length', 'ValueLength', and 'Type'
     |      
     |      VS_FIXEDFILEINFO will hold the rest of the fields, accessible as sub-attributes:
     |          'Signature', 'StrucVersion', 'FileVersionMS', 'FileVersionLS',
     |          'ProductVersionMS', 'ProductVersionLS', 'FileFlagsMask', 'FileFlags',
     |          'FileOS', 'FileType', 'FileSubtype', 'FileDateMS', 'FileDateLS'
     |      
     |      FileInfo    is a list of all StringFileInfo and VarFileInfo structures.
     |      
     |      StringFileInfo structures will have a list as an attribute named 'StringTable'
     |      containing all the StringTable structures. Each of those structures contains a
     |      dictionary 'entries' with all the key / value version information string pairs.
     |      
     |      VarFileInfo structures will have a list as an attribute named 'Var' containing
     |      all Var structures. Each Var structure will have a dictionary as an attribute
     |      named 'entry' which will contain the name and value of the Var.
     |  
     |  print_info(self, encoding='utf-8')
     |      Print all the PE header information in a human readable from.
     |  
     |  relocate_image(self, new_ImageBase)
     |      Apply the relocation information to the image using the provided image base.
     |      
     |      This method will apply the relocation information to the image. Given the new
     |      base, all the relocations will be processed and both the raw data and the
     |      section's data will be fixed accordingly.
     |      The resulting image can be retrieved as well through the method:
     |      
     |          get_memory_mapped_image()
     |      
     |      In order to get something that would more closely match what could be found in
     |      memory once the Windows loader finished its work.
     |  
     |  set_bytes_at_offset(self, offset, data)
     |      Overwrite the bytes at the given file offset with the given string.
     |      
     |      Return True if successful, False otherwise. It can fail if the
     |      offset is outside the file's boundaries.
     |  
     |  set_bytes_at_rva(self, rva, data)
     |      Overwrite, with the given string, the bytes at the file offset corresponding
     |      to the given RVA.
     |      
     |      Return True if successful, False otherwise. It can fail if the
     |      offset is outside the file's boundaries.
     |  
     |  set_data_bytes(self, offset: int, data: bytes)
     |  
     |  set_dword_at_offset(self, offset, dword)
     |      Set the double word value at the given file offset.
     |  
     |  set_dword_at_rva(self, rva, dword)
     |      Set the double word value at the file offset corresponding to the given RVA.
     |  
     |  set_qword_at_offset(self, offset, qword)
     |      Set the quad-word value at the given file offset.
     |  
     |  set_qword_at_rva(self, rva, qword)
     |      Set the quad-word value at the file offset corresponding to the given RVA.
     |  
     |  set_word_at_offset(self, offset, word)
     |      Set the word value at the given file offset.
     |  
     |  set_word_at_rva(self, rva, word)
     |      Set the word value at the file offset corresponding to the given RVA.
     |  
     |  show_warnings(self)
     |      Print the list of warnings.
     |      
     |      Non-critical problems found when parsing the PE file are
     |      appended to a list of warnings. This method prints the
     |      full list to standard output.
     |  
     |  trim(self)
     |      Return the just data defined by the PE headers, removing any overlaid data.
     |  
     |  verify_checksum(self)
     |  
     |  write(self, filename=None)
     |      Write the PE file.
     |      
     |      This function will process all headers and components
     |      of the PE file and include all changes made (by just
     |      assigning to attributes in the PE objects) and write
     |      the changes back to a file whose name is provided as
     |      an argument. The filename is optional, if not
     |      provided the data will be returned as a 'str' object.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __IMAGE_BASE_RELOCATION_ENTRY_format__ = ('IMAGE_BASE_RELOCATION_ENTRY...
     |  
     |  __IMAGE_BASE_RELOCATION_format__ = ('IMAGE_BASE_RELOCATION', ('I,Virtu...
     |  
     |  __IMAGE_BOUND_FORWARDER_REF_format__ = ('IMAGE_BOUND_FORWARDER_REF', (...
     |  
     |  __IMAGE_BOUND_IMPORT_DESCRIPTOR_format__ = ('IMAGE_BOUND_IMPORT_DESCRI...
     |  
     |  __IMAGE_DATA_DIRECTORY_format__ = ('IMAGE_DATA_DIRECTORY', ('I,Virtual...
     |  
     |  __IMAGE_DEBUG_DIRECTORY_format__ = ('IMAGE_DEBUG_DIRECTORY', ('I,Chara...
     |  
     |  __IMAGE_DELAY_IMPORT_DESCRIPTOR_format__ = ('IMAGE_DELAY_IMPORT_DESCRI...
     |  
     |  __IMAGE_DOS_HEADER_format__ = ('IMAGE_DOS_HEADER', ('H,e_magic', 'H,e_...
     |  
     |  __IMAGE_EXPORT_DIRECTORY_format__ = ('IMAGE_EXPORT_DIRECTORY', ('I,Cha...
     |  
     |  __IMAGE_FILE_HEADER_format__ = ('IMAGE_FILE_HEADER', ('H,Machine', 'H,...
     |  
     |  __IMAGE_IMPORT_DESCRIPTOR_format__ = ('IMAGE_IMPORT_DESCRIPTOR', ('I,O...
     |  
     |  __IMAGE_LOAD_CONFIG_DIRECTORY64_format__ = ('IMAGE_LOAD_CONFIG_DIRECTO...
     |  
     |  __IMAGE_LOAD_CONFIG_DIRECTORY_format__ = ('IMAGE_LOAD_CONFIG_DIRECTORY...
     |  
     |  __IMAGE_NT_HEADERS_format__ = ('IMAGE_NT_HEADERS', ('I,Signature',))
     |  
     |  __IMAGE_OPTIONAL_HEADER64_format__ = ('IMAGE_OPTIONAL_HEADER64', ('H,M...
     |  
     |  __IMAGE_OPTIONAL_HEADER_format__ = ('IMAGE_OPTIONAL_HEADER', ('H,Magic...
     |  
     |  __IMAGE_RESOURCE_DATA_ENTRY_format__ = ('IMAGE_RESOURCE_DATA_ENTRY', (...
     |  
     |  __IMAGE_RESOURCE_DIRECTORY_ENTRY_format__ = ('IMAGE_RESOURCE_DIRECTORY...
     |  
     |  __IMAGE_RESOURCE_DIRECTORY_format__ = ('IMAGE_RESOURCE_DIRECTORY', ('I...
     |  
     |  __IMAGE_SECTION_HEADER_format__ = ('IMAGE_SECTION_HEADER', ('8s,Name',...
     |  
     |  __IMAGE_THUNK_DATA64_format__ = ('IMAGE_THUNK_DATA', ('Q,ForwarderStri...
     |  
     |  __IMAGE_THUNK_DATA_format__ = ('IMAGE_THUNK_DATA', ('I,ForwarderString...
     |  
     |  __IMAGE_TLS_DIRECTORY64_format__ = ('IMAGE_TLS_DIRECTORY', ('Q,StartAd...
     |  
     |  __IMAGE_TLS_DIRECTORY_format__ = ('IMAGE_TLS_DIRECTORY', ('I,StartAddr...
     |  
     |  __RUNTIME_FUNCTION_format__ = ('RUNTIME_FUNCTION', ('I,BeginAddress', ...
     |  
     |  __StringFileInfo_format__ = ('StringFileInfo', ('H,Length', 'H,ValueLe...
     |  
     |  __StringTable_format__ = ('StringTable', ('H,Length', 'H,ValueLength',...
     |  
     |  __String_format__ = ('String', ('H,Length', 'H,ValueLength', 'H,Type')...
     |  
     |  __VS_FIXEDFILEINFO_format__ = ('VS_FIXEDFILEINFO', ('I,Signature', 'I,...
     |  
     |  __VS_VERSIONINFO_format__ = ('VS_VERSIONINFO', ('H,Length', 'H,ValueLe...
     |  
     |  __Var_format__ = ('Var', ('H,Length', 'H,ValueLength', 'H,Type'))
    
    class PEFormatError(builtins.Exception)
     |  PEFormatError(value)
     |  
     |  Generic PE format error exception.
     |  
     |  Method resolution order:
     |      PEFormatError
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, value)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.Exception:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __reduce__(...)
     |      Helper for pickle.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  __setstate__(...)
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args
    
    class PrologEpilogOp(builtins.object)
     |  Meant as an abstract class representing a generic unwind code.
     |  There is a subclass of PrologEpilogOp for each member of UNWIND_OP_CODES enum.
     |  
     |  Methods defined here:
     |  
     |  initialize(self, unw_code, data, unw_info, file_offset)
     |  
     |  is_valid(self)
     |  
     |  length_in_code_structures(self, unw_code, unw_info)
     |      Computes how many UNWIND_CODE structures UNWIND_CODE occupies.
     |      May be called before initialize() and, for that reason, should not rely on
     |      the values of intance attributes.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class PrologEpilogOpAllocLarge(PrologEpilogOp)
     |  UWOP_ALLOC_LARGE
     |  
     |  Method resolution order:
     |      PrologEpilogOpAllocLarge
     |      PrologEpilogOp
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  get_alloc_size(self)
     |  
     |  length_in_code_structures(self, unw_code, unw_info)
     |      Computes how many UNWIND_CODE structures UNWIND_CODE occupies.
     |      May be called before initialize() and, for that reason, should not rely on
     |      the values of intance attributes.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PrologEpilogOp:
     |  
     |  initialize(self, unw_code, data, unw_info, file_offset)
     |  
     |  is_valid(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PrologEpilogOp:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class PrologEpilogOpAllocSmall(PrologEpilogOp)
     |  UWOP_ALLOC_SMALL
     |  
     |  Method resolution order:
     |      PrologEpilogOpAllocSmall
     |      PrologEpilogOp
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  get_alloc_size(self)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PrologEpilogOp:
     |  
     |  initialize(self, unw_code, data, unw_info, file_offset)
     |  
     |  is_valid(self)
     |  
     |  length_in_code_structures(self, unw_code, unw_info)
     |      Computes how many UNWIND_CODE structures UNWIND_CODE occupies.
     |      May be called before initialize() and, for that reason, should not rely on
     |      the values of intance attributes.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PrologEpilogOp:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class PrologEpilogOpEpilogMarker(PrologEpilogOp)
     |  UWOP_EPILOG
     |  
     |  Method resolution order:
     |      PrologEpilogOpEpilogMarker
     |      PrologEpilogOp
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  get_offset(self)
     |  
     |  initialize(self, unw_code, data, unw_info, file_offset)
     |  
     |  is_valid(self)
     |  
     |  length_in_code_structures(self, unw_code, unw_info)
     |      Computes how many UNWIND_CODE structures UNWIND_CODE occupies.
     |      May be called before initialize() and, for that reason, should not rely on
     |      the values of intance attributes.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PrologEpilogOp:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class PrologEpilogOpPushFrame(PrologEpilogOp)
     |  UWOP_PUSH_MACHFRAME
     |  
     |  Method resolution order:
     |      PrologEpilogOpPushFrame
     |      PrologEpilogOp
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PrologEpilogOp:
     |  
     |  initialize(self, unw_code, data, unw_info, file_offset)
     |  
     |  is_valid(self)
     |  
     |  length_in_code_structures(self, unw_code, unw_info)
     |      Computes how many UNWIND_CODE structures UNWIND_CODE occupies.
     |      May be called before initialize() and, for that reason, should not rely on
     |      the values of intance attributes.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PrologEpilogOp:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class PrologEpilogOpPushReg(PrologEpilogOp)
     |  UWOP_PUSH_NONVOL
     |  
     |  Method resolution order:
     |      PrologEpilogOpPushReg
     |      PrologEpilogOp
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PrologEpilogOp:
     |  
     |  initialize(self, unw_code, data, unw_info, file_offset)
     |  
     |  is_valid(self)
     |  
     |  length_in_code_structures(self, unw_code, unw_info)
     |      Computes how many UNWIND_CODE structures UNWIND_CODE occupies.
     |      May be called before initialize() and, for that reason, should not rely on
     |      the values of intance attributes.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PrologEpilogOp:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class PrologEpilogOpSaveReg(PrologEpilogOp)
     |  UWOP_SAVE_NONVOL
     |  
     |  Method resolution order:
     |      PrologEpilogOpSaveReg
     |      PrologEpilogOp
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  get_offset(self)
     |  
     |  length_in_code_structures(self, unwcode, unw_info)
     |      Computes how many UNWIND_CODE structures UNWIND_CODE occupies.
     |      May be called before initialize() and, for that reason, should not rely on
     |      the values of intance attributes.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PrologEpilogOp:
     |  
     |  initialize(self, unw_code, data, unw_info, file_offset)
     |  
     |  is_valid(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PrologEpilogOp:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class PrologEpilogOpSaveRegFar(PrologEpilogOp)
     |  UWOP_SAVE_NONVOL_FAR
     |  
     |  Method resolution order:
     |      PrologEpilogOpSaveRegFar
     |      PrologEpilogOp
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  get_offset(self)
     |  
     |  length_in_code_structures(self, unw_code, unw_info)
     |      Computes how many UNWIND_CODE structures UNWIND_CODE occupies.
     |      May be called before initialize() and, for that reason, should not rely on
     |      the values of intance attributes.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PrologEpilogOp:
     |  
     |  initialize(self, unw_code, data, unw_info, file_offset)
     |  
     |  is_valid(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PrologEpilogOp:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class PrologEpilogOpSaveXMM(PrologEpilogOp)
     |  UWOP_SAVE_XMM128
     |  
     |  Method resolution order:
     |      PrologEpilogOpSaveXMM
     |      PrologEpilogOp
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  get_offset(self)
     |  
     |  length_in_code_structures(self, unw_code, unw_info)
     |      Computes how many UNWIND_CODE structures UNWIND_CODE occupies.
     |      May be called before initialize() and, for that reason, should not rely on
     |      the values of intance attributes.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PrologEpilogOp:
     |  
     |  initialize(self, unw_code, data, unw_info, file_offset)
     |  
     |  is_valid(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PrologEpilogOp:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class PrologEpilogOpSaveXMMFar(PrologEpilogOp)
     |  UWOP_SAVE_XMM128_FAR
     |  
     |  Method resolution order:
     |      PrologEpilogOpSaveXMMFar
     |      PrologEpilogOp
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  get_offset(self)
     |  
     |  length_in_code_structures(self, unw_code, unw_info)
     |      Computes how many UNWIND_CODE structures UNWIND_CODE occupies.
     |      May be called before initialize() and, for that reason, should not rely on
     |      the values of intance attributes.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PrologEpilogOp:
     |  
     |  initialize(self, unw_code, data, unw_info, file_offset)
     |  
     |  is_valid(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PrologEpilogOp:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class PrologEpilogOpSetFP(PrologEpilogOp)
     |  UWOP_SET_FPREG
     |  
     |  Method resolution order:
     |      PrologEpilogOpSetFP
     |      PrologEpilogOp
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  initialize(self, unw_code, data, unw_info, file_offset)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PrologEpilogOp:
     |  
     |  is_valid(self)
     |  
     |  length_in_code_structures(self, unw_code, unw_info)
     |      Computes how many UNWIND_CODE structures UNWIND_CODE occupies.
     |      May be called before initialize() and, for that reason, should not rely on
     |      the values of intance attributes.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PrologEpilogOp:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class PrologEpilogOpsFactory(builtins.object)
     |  A factory for creating unwind codes based on the value of UnwindOp
     |  
     |  Static methods defined here:
     |  
     |  create(unwcode)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class RelocationData(DataContainer)
     |  RelocationData(**args)
     |  
     |  Holds relocation information.
     |  
     |  type:       Type of relocation
     |              The type string can be obtained by
     |              RELOCATION_TYPE[type]
     |  rva:        RVA of the relocation
     |  
     |  Method resolution order:
     |      RelocationData
     |      DataContainer
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __setattr__(self, name, val)
     |      Implement setattr(self, name, value).
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from DataContainer:
     |  
     |  __init__(self, **args)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from DataContainer:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class ResourceDataEntryData(DataContainer)
     |  ResourceDataEntryData(**args)
     |  
     |  Holds resource data entry information.
     |  
     |  struct:     IMAGE_RESOURCE_DATA_ENTRY structure
     |  lang:       Primary language ID
     |  sublang:    Sublanguage ID
     |  
     |  Method resolution order:
     |      ResourceDataEntryData
     |      DataContainer
     |      builtins.object
     |  
     |  Methods inherited from DataContainer:
     |  
     |  __init__(self, **args)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from DataContainer:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class ResourceDirData(DataContainer)
     |  ResourceDirData(**args)
     |  
     |  Holds resource directory information.
     |  
     |  struct:     IMAGE_RESOURCE_DIRECTORY structure
     |  entries:    list of entries (ResourceDirEntryData instances)
     |  
     |  Method resolution order:
     |      ResourceDirData
     |      DataContainer
     |      builtins.object
     |  
     |  Methods inherited from DataContainer:
     |  
     |  __init__(self, **args)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from DataContainer:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class ResourceDirEntryData(DataContainer)
     |  ResourceDirEntryData(**args)
     |  
     |  Holds resource directory entry data.
     |  
     |  struct:     IMAGE_RESOURCE_DIRECTORY_ENTRY structure
     |  name:       If the resource is identified by name this
     |              attribute will contain the name string. None
     |              otherwise. If identified by id, the id is
     |              available at 'struct.Id'
     |  id:         the id, also in struct.Id
     |  directory:  If this entry has a lower level directory
     |              this attribute will point to the
     |              ResourceDirData instance representing it.
     |  data:       If this entry has no further lower directories
     |              and points to the actual resource data, this
     |              attribute will reference the corresponding
     |              ResourceDataEntryData instance.
     |  (Either of the 'directory' or 'data' attribute will exist,
     |  but not both.)
     |  
     |  Method resolution order:
     |      ResourceDirEntryData
     |      DataContainer
     |      builtins.object
     |  
     |  Methods inherited from DataContainer:
     |  
     |  __init__(self, **args)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from DataContainer:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class SectionStructure(Structure)
     |  SectionStructure(*argl, **argd)
     |  
     |  Convenience section handling class.
     |  
     |  Method resolution order:
     |      SectionStructure
     |      Structure
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, *argl, **argd)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __setattr__(self, name, val)
     |      Implement setattr(self, name, value).
     |  
     |  contains(self, rva)
     |  
     |  contains_offset(self, offset)
     |      Check whether the section contains the file offset provided.
     |  
     |  contains_rva(self, rva)
     |      Check whether the section contains the address provided.
     |  
     |  entropy_H(self, data)
     |      Calculate the entropy of a chunk of data.
     |  
     |  get_PointerToRawData_adj(self)
     |  
     |  get_VirtualAddress_adj(self)
     |  
     |  get_data(self, start=None, length=None, ignore_padding=False)
     |      Get data chunk from a section.
     |      
     |      Allows to query data from the section by passing the
     |      addresses where the PE file would be loaded by default.
     |      It is then possible to retrieve code and data by their real
     |      addresses as they would be if loaded.
     |      
     |      Note that sections on disk can include padding that would
     |      not be loaded to memory. That is the case if `section.SizeOfRawData`
     |      is greater than `section.Misc_VirtualSize`, and that means
     |      that data past `section.Misc_VirtualSize` is padding.
     |      In case you are not interested in this padding, passing
     |      `ignore_padding=True` will truncate the result in order
     |      not to return the padding (if any).
     |      
     |      Returns bytes() under Python 3.x and set() under Python 2.7
     |  
     |  get_entropy(self)
     |      Calculate and return the entropy for the section.
     |  
     |  get_hash_md5(self)
     |      Get the MD5 hex-digest of the section's data.
     |  
     |  get_hash_sha1(self)
     |      Get the SHA-1 hex-digest of the section's data.
     |  
     |  get_hash_sha256(self)
     |      Get the SHA-256 hex-digest of the section's data.
     |  
     |  get_hash_sha512(self)
     |      Get the SHA-512 hex-digest of the section's data.
     |  
     |  get_offset_from_rva(self, rva)
     |  
     |  get_rva_from_offset(self, offset)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Structure:
     |  
     |  __get_format__(self)
     |  
     |  __pack__(self)
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  __unpack__(self, data)
     |  
     |  all_zeroes(self)
     |      Returns true is the unpacked data is all zeros.
     |  
     |  dump(self, indentation=0)
     |      Returns a string representation of the structure.
     |  
     |  dump_dict(self)
     |      Returns a dictionary representation of the structure.
     |  
     |  get_field_absolute_offset(self, field_name)
     |      Return the offset within the field for the requested field in the structure.
     |  
     |  get_field_relative_offset(self, field_name)
     |      Return the offset within the structure for the requested field.
     |  
     |  get_file_offset(self)
     |  
     |  set_file_offset(self, offset)
     |  
     |  sizeof(self)
     |      Return size of the structure.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Structure:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class Structure(builtins.object)
     |  Structure(format, name=None, file_offset=None)
     |  
     |  Prepare structure object to extract members from data.
     |  
     |  Format is a list containing definitions for the elements
     |  of the structure.
     |  
     |  Methods defined here:
     |  
     |  __get_format__(self)
     |  
     |  __init__(self, format, name=None, file_offset=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __pack__(self)
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  __unpack__(self, data)
     |  
     |  all_zeroes(self)
     |      Returns true is the unpacked data is all zeros.
     |  
     |  dump(self, indentation=0)
     |      Returns a string representation of the structure.
     |  
     |  dump_dict(self)
     |      Returns a dictionary representation of the structure.
     |  
     |  get_field_absolute_offset(self, field_name)
     |      Return the offset within the field for the requested field in the structure.
     |  
     |  get_field_relative_offset(self, field_name)
     |      Return the offset within the structure for the requested field.
     |  
     |  get_file_offset(self)
     |  
     |  set_file_offset(self, offset)
     |  
     |  sizeof(self)
     |      Return size of the structure.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class StructureWithBitfields(Structure)
     |  StructureWithBitfields(format, name=None, file_offset=None)
     |  
     |  Extends Structure's functionality with support for bitfields such as:
     |      ('B:4,LowerHalf', 'B:4,UpperHalf')
     |  To this end, two lists are maintained:
     |      * self.__keys__ that contains compound fields, for example
     |        ('B,~LowerHalfUpperHalf'), and is used during packing/unpaking
     |      * self.__keys_ext__ containing a separate key for each field (ex., LowerHalf,
     |        UpperHalf) to simplify implementation of dump()
     |  This way the implementation of unpacking/packing and dump() from Structure can be
     |  reused.
     |  
     |  In addition, we create a dictionary:
     |      <comound_field_index_in_keys> -->
     |          (data type, [ (subfield name, length in bits)+ ] )
     |  that facilitates bitfield paking and unpacking.
     |  
     |  With lru_cache() creating only once instance per format string, the memory
     |  overhead is negligible.
     |  
     |  Method resolution order:
     |      StructureWithBitfields
     |      Structure
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, format, name=None, file_offset=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __pack__(self)
     |  
     |  __unpack__(self, data)
     |  
     |  dump(self, indentation=0)
     |      Returns a string representation of the structure.
     |  
     |  dump_dict(self)
     |      Returns a dictionary representation of the structure.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  BTF_BITCNT_IDX = 1
     |  
     |  BTF_NAME_IDX = 0
     |  
     |  CF_SUBFLD_IDX = 1
     |  
     |  CF_TYPE_IDX = 0
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Structure:
     |  
     |  __get_format__(self)
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  all_zeroes(self)
     |      Returns true is the unpacked data is all zeros.
     |  
     |  get_field_absolute_offset(self, field_name)
     |      Return the offset within the field for the requested field in the structure.
     |  
     |  get_field_relative_offset(self, field_name)
     |      Return the offset within the structure for the requested field.
     |  
     |  get_file_offset(self)
     |  
     |  set_file_offset(self, offset)
     |  
     |  sizeof(self)
     |      Return size of the structure.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Structure:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class TlsData(DataContainer)
     |  TlsData(**args)
     |  
     |  Holds TLS information.
     |  
     |  struct:     IMAGE_TLS_DIRECTORY structure
     |  
     |  Method resolution order:
     |      TlsData
     |      DataContainer
     |      builtins.object
     |  
     |  Methods inherited from DataContainer:
     |  
     |  __init__(self, **args)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from DataContainer:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class UnicodeStringWrapperPostProcessor(builtins.object)
     |  UnicodeStringWrapperPostProcessor(pe, rva_ptr)
     |  
     |  This class attempts to help the process of identifying strings
     |  that might be plain Unicode or Pascal. A list of strings will be
     |  wrapped on it with the hope the overlappings will help make the
     |  decision about their type.
     |  
     |  Methods defined here:
     |  
     |  __init__(self, pe, rva_ptr)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __str__(self)
     |      Return the escaped UTF-8 representation of the string.
     |  
     |  ask_unicode_16(self, next_rva_ptr)
     |      The next RVA is taken to be the one immediately following this one.
     |      
     |      Such RVA could indicate the natural end of the string and will be checked
     |      to see if there's a Unicode NULL character there.
     |  
     |  decode(self, *args)
     |  
     |  get_pascal_16_length(self)
     |  
     |  get_rva(self)
     |      Get the RVA of the string.
     |  
     |  invalidate(self)
     |      Make this instance None, to express it's no known string type.
     |  
     |  render_pascal_16(self)
     |  
     |  render_unicode_16(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class UnwindInfo(StructureWithBitfields)
     |  UnwindInfo(file_offset=0)
     |  
     |  Handles the complexities of UNWIND_INFO structure:
     |  * variable number of UWIND_CODEs
     |  * optional ExceptionHandler and FunctionEntry fields
     |  
     |  Method resolution order:
     |      UnwindInfo
     |      StructureWithBitfields
     |      Structure
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, file_offset=0)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __pack__(self)
     |  
     |  __setattr__(self, name, val)
     |      Implement setattr(self, name, value).
     |  
     |  dump(self, indentation=0)
     |      Returns a string representation of the structure.
     |  
     |  dump_dict(self)
     |      Returns a dictionary representation of the structure.
     |  
     |  get_chained_function_entry(self)
     |  
     |  set_chained_function_entry(self, entry)
     |  
     |  sizeof(self)
     |      Return size of the structure.
     |  
     |  unpack_in_stages(self, data)
     |      Unpacks the UNWIND_INFO "in two calls", with the first call establishing
     |      a full size of the structure and the second, performing the actual unpacking.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from StructureWithBitfields:
     |  
     |  __unpack__(self, data)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from StructureWithBitfields:
     |  
     |  BTF_BITCNT_IDX = 1
     |  
     |  BTF_NAME_IDX = 0
     |  
     |  CF_SUBFLD_IDX = 1
     |  
     |  CF_TYPE_IDX = 0
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Structure:
     |  
     |  __get_format__(self)
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  all_zeroes(self)
     |      Returns true is the unpacked data is all zeros.
     |  
     |  get_field_absolute_offset(self, field_name)
     |      Return the offset within the field for the requested field in the structure.
     |  
     |  get_field_relative_offset(self, field_name)
     |      Return the offset within the structure for the requested field.
     |  
     |  get_file_offset(self)
     |  
     |  set_file_offset(self, offset)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Structure:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)

FUNCTIONS
    b(x)
    
    cache_adjust_FileAlignment(val, file_alignment)
    
    cache_adjust_SectionAlignment(val, section_alignment, file_alignment)
    
    count_zeroes(data)
    
    get_sublang_name_for_lang(lang_value, sublang_value)
        # Resolve a sublang name given the main lang name
    
    is_valid_dos_filename(s)
    
    is_valid_function_name(s)
    
    lru_cache(maxsize=128, typed=False, copy=False)
        # lru_cache with a shallow copy of the objects returned (list, dicts, ..)
        # we don't use deepcopy as it's _really_ slow and the data we retrieved using
        # this is enough with copy.copy taken from
        # https://stackoverflow.com/questions/54909357
    
    main()
    
    md5 = openssl_md5(string=b'', *, usedforsecurity=True)
        Returns a md5 hash object; optionally initialized with a string
    
    parse_strings(data, counter, l)
        # Ange Albertini's code to process resources' strings
    
    power_of_two(val)
    
    retrieve_flags(flag_dict, flag_filter)
        Read the flags from a dictionary and return them in a usable form.
        
        Will return a list of (flag, value) for all flags in "flag_dict"
        matching the filter "flag_filter".
    
    set_bitfields_format(format)
    
    set_flags(obj, flag_field, flags)
        Will process the flags and set attributes in the object accordingly.
        
        The object "obj" will gain attributes named after the flags provided in
        "flags" and valued True/False, matching the results of applying each
        flag value from "flags" to flag_field.
    
    set_format(format)
    
    sha1 = openssl_sha1(string=b'', *, usedforsecurity=True)
        Returns a sha1 hash object; optionally initialized with a string
    
    sha256 = openssl_sha256(string=b'', *, usedforsecurity=True)
        Returns a sha256 hash object; optionally initialized with a string
    
    sha512 = openssl_sha512(string=b'', *, usedforsecurity=True)
        Returns a sha512 hash object; optionally initialized with a string
    
    sizeof_type(t)
    
    two_way_dict(pairs)

DATA
    DEBUG_TYPE = {0: 'IMAGE_DEBUG_TYPE_UNKNOWN', 1: 'IMAGE_DEBUG_TYPE_COFF...
    DIRECTORY_ENTRY = {0: 'IMAGE_DIRECTORY_ENTRY_EXPORT', 1: 'IMAGE_DIRECT...
    DLL_CHARACTERISTICS = {1: 'IMAGE_LIBRARY_PROCESS_INIT', 2: 'IMAGE_LIBR...
    FILE_ALIGNMENT_HARDCODED_VALUE = 512
    IMAGE_CHARACTERISTICS = {1: 'IMAGE_FILE_RELOCS_STRIPPED', 2: 'IMAGE_FI...
    IMAGE_DOSZM_SIGNATURE = 19802
    IMAGE_DOS_SIGNATURE = 23117
    IMAGE_LE_SIGNATURE = 17740
    IMAGE_LX_SIGNATURE = 22604
    IMAGE_NE_SIGNATURE = 17742
    IMAGE_NT_SIGNATURE = 17744
    IMAGE_NUMBEROF_DIRECTORY_ENTRIES = 16
    IMAGE_ORDINAL_FLAG = 2147483648
    IMAGE_ORDINAL_FLAG64 = 9223372036854775808
    IMAGE_TE_SIGNATURE = 23126
    LANG = {0: 'LANG_NEUTRAL', 127: 'LANG_INVARIANT', 54: 'LANG_AFRIKAANS'...
    MACHINE_TYPE = {0: 'IMAGE_FILE_MACHINE_UNKNOWN', 332: 'IMAGE_FILE_MACH...
    MAX_DLL_LENGTH = 512
    MAX_IMPORT_NAME_LENGTH = 512
    MAX_IMPORT_SYMBOLS = 8192
    MAX_RESOURCE_DEPTH = 32
    MAX_RESOURCE_ENTRIES = 32768
    MAX_SECTIONS = 2048
    MAX_STRING_LENGTH = 1048576
    MAX_SYMBOL_EXPORT_COUNT = 8192
    MAX_SYMBOL_NAME_LENGTH = 512
    OPTIONAL_HEADER_MAGIC_PE = 267
    OPTIONAL_HEADER_MAGIC_PE_PLUS = 523
    REGISTERS = {0: 'RAX', 1: 'RCX', 2: 'RDX', 3: 'RBX', 4: 'RSP', 5: 'RBP...
    RELOCATION_TYPE = {0: 'IMAGE_REL_BASED_ABSOLUTE', 1: 'IMAGE_REL_BASED_...
    RESOURCE_TYPE = {1: 'RT_CURSOR', 2: 'RT_BITMAP', 3: 'RT_ICON', 4: 'RT_...
    SECTION_CHARACTERISTICS = {0: 'IMAGE_SCN_TYPE_REG', 1: 'IMAGE_SCN_TYPE...
    STRUCT_SIZEOF_TYPES = {'B': 1, 'H': 2, 'I': 4, 'L': 4, 'Q': 8, 'b': 1,...
    SUBLANG = {'SUBLANG_NEUTRAL': 0, 'SUBLANG_DEFAULT': 1, 'SUBLANG_SYS_DE...
    SUBSYSTEM_TYPE = {0: 'IMAGE_SUBSYSTEM_UNKNOWN', 1: 'IMAGE_SUBSYSTEM_NA...
    UNWIND_INFO_FLAGS = {1: 'UNW_FLAG_EHANDLER', 2: 'UNW_FLAG_UHANDLER', 4...
    UWOP_ALLOC_LARGE = 1
    UWOP_ALLOC_SMALL = 2
    UWOP_EPILOG = 6
    UWOP_PUSH_MACHFRAME = 10
    UWOP_PUSH_NONVOL = 0
    UWOP_SAVE_NONVOL = 4
    UWOP_SAVE_NONVOL_FAR = 5
    UWOP_SAVE_XMM128 = 8
    UWOP_SAVE_XMM128_FAR = 9
    UWOP_SET_FPREG = 3
    __contact__ = 'ero.carrera@gmail.com'
    allowed_filename = b"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVW...
    allowed_function_name = b'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQR...
    debug_types = [('IMAGE_DEBUG_TYPE_UNKNOWN', 0), ('IMAGE_DEBUG_TYPE_COF...
    directory_entry_types = [('IMAGE_DIRECTORY_ENTRY_EXPORT', 0), ('IMAGE_...
    dll_characteristics = [('IMAGE_LIBRARY_PROCESS_INIT', 1), ('IMAGE_LIBR...
    fast_load = False
    image_characteristics = [('IMAGE_FILE_RELOCS_STRIPPED', 1), ('IMAGE_FI...
    lang = [('LANG_NEUTRAL', 0), ('LANG_INVARIANT', 127), ('LANG_AFRIKAANS...
    machine_types = [('IMAGE_FILE_MACHINE_UNKNOWN', 0), ('IMAGE_FILE_MACHI...
    registers = [('RAX', 0), ('RCX', 1), ('RDX', 2), ('RBX', 3), ('RSP', 4...
    relocation_types = [('IMAGE_REL_BASED_ABSOLUTE', 0), ('IMAGE_REL_BASED...
    resource_type = [('RT_CURSOR', 1), ('RT_BITMAP', 2), ('RT_ICON', 3), (...
    section_characteristics = [('IMAGE_SCN_TYPE_REG', 0), ('IMAGE_SCN_TYPE...
    sublang = [('SUBLANG_NEUTRAL', 0), ('SUBLANG_DEFAULT', 1), ('SUBLANG_S...
    sublang_name = 'SUBLANG_GAELIC_MANX'
    sublang_value = 3
    subsystem_types = [('IMAGE_SUBSYSTEM_UNKNOWN', 0), ('IMAGE_SUBSYSTEM_N...
    unwind_info_flags = [('UNW_FLAG_EHANDLER', 1), ('UNW_FLAG_UHANDLER', 2...

VERSION
    2022.5.30

AUTHOR
    Ero Carrera

FILE
    c:\users\user\appdata\local\programs\python\python310\lib\site-packages\pefile.py
