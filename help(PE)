Help on PE in module pefile object:

class PE(builtins.object)
 |  PE(name=None, data=None, fast_load=None, max_symbol_exports=8192, max_repeated_symbol=120)
 |  
 |  A Portable Executable representation.
 |  
 |  This class provides access to most of the information in a PE file.
 |  
 |  It expects to be supplied the name of the file to load or PE data
 |  to process and an optional argument 'fast_load' (False by default)
 |  which controls whether to load all the directories information,
 |  which can be quite time consuming.
 |  
 |  pe = pefile.PE('module.dll')
 |  pe = pefile.PE(name='module.dll')
 |  
 |  would load 'module.dll' and process it. If the data is already
 |  available in a buffer the same can be achieved with:
 |  
 |  pe = pefile.PE(data=module_dll_data)
 |  
 |  The "fast_load" can be set to a default by setting its value in the
 |  module itself by means, for instance, of a "pefile.fast_load = True".
 |  That will make all the subsequent instances not to load the
 |  whole PE structure. The "full_load" method can be used to parse
 |  the missing data at a later stage.
 |  
 |  Basic headers information will be available in the attributes:
 |  
 |  DOS_HEADER
 |  NT_HEADERS
 |  FILE_HEADER
 |  OPTIONAL_HEADER
 |  
 |  All of them will contain among their attributes the members of the
 |  corresponding structures as defined in WINNT.H
 |  
 |  The raw data corresponding to the header (from the beginning of the
 |  file up to the start of the first section) will be available in the
 |  instance's attribute 'header' as a string.
 |  
 |  The sections will be available as a list in the 'sections' attribute.
 |  Each entry will contain as attributes all the structure's members.
 |  
 |  Directory entries will be available as attributes (if they exist):
 |  (no other entries are processed at this point)
 |  
 |  DIRECTORY_ENTRY_IMPORT (list of ImportDescData instances)
 |  DIRECTORY_ENTRY_EXPORT (ExportDirData instance)
 |  DIRECTORY_ENTRY_RESOURCE (ResourceDirData instance)
 |  DIRECTORY_ENTRY_DEBUG (list of DebugData instances)
 |  DIRECTORY_ENTRY_BASERELOC (list of BaseRelocationData instances)
 |  DIRECTORY_ENTRY_TLS
 |  DIRECTORY_ENTRY_BOUND_IMPORT (list of BoundImportData instances)
 |  
 |  The following dictionary attributes provide ways of mapping different
 |  constants. They will accept the numeric value and return the string
 |  representation and the opposite, feed in the string and get the
 |  numeric constant:
 |  
 |  DIRECTORY_ENTRY
 |  IMAGE_CHARACTERISTICS
 |  SECTION_CHARACTERISTICS
 |  DEBUG_TYPE
 |  SUBSYSTEM_TYPE
 |  MACHINE_TYPE
 |  RELOCATION_TYPE
 |  RESOURCE_TYPE
 |  LANG
 |  SUBLANG
 |  
 |  Methods defined here:
 |  
 |  __enter__(self)
 |  
 |  __exit__(self, type, value, traceback)
 |  
 |  __init__(self, name=None, data=None, fast_load=None, max_symbol_exports=8192, max_repeated_symbol=120)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __parse__(self, fname, data, fast_load)
 |      Parse a Portable Executable file.
 |      
 |      Loads a PE file, parsing all its structures and making them available
 |      through the instance's attributes.
 |  
 |  __str__(self)
 |      Return str(self).
 |  
 |  __unpack_data__(self, format, data, file_offset)
 |      Apply structure format to raw data.
 |      
 |      Returns an unpacked structure object if successful, None otherwise.
 |  
 |  adjust_FileAlignment(self, val, file_alignment)
 |      # According to http://corkami.blogspot.com/2010/01/parce-que-la-planche-aura-brule.html
 |      # if PointerToRawData is less that 0x200 it's rounded to zero. Loading the test file
 |      # in a debugger it's easy to verify that the PointerToRawData value of 1 is rounded
 |      # to zero. Hence we reproduce the behavior
 |      #
 |      # According to the document:
 |      # [ Microsoft Portable Executable and Common Object File Format Specification ]
 |      # "The alignment factor (in bytes) that is used to align the raw data of sections in
 |      #  the image file. The value should be a power of 2 between 512 and 64 K, inclusive.
 |      #  The default is 512. If the SectionAlignment is less than the architecture's page
 |      #  size, then FileAlignment must match SectionAlignment."
 |      #
 |      # The following is a hard-coded constant if the Windows loader
 |  
 |  adjust_SectionAlignment(self, val, section_alignment, file_alignment)
 |      # According to the document:
 |      # [ Microsoft Portable Executable and Common Object File Format Specification ]
 |      # "The alignment (in bytes) of sections when they are loaded into memory. It must be
 |      #  greater than or equal to FileAlignment. The default is the page size for the
 |      #  architecture."
 |  
 |  close(self)
 |  
 |  dump_dict(self)
 |      Dump all the PE header information into a dictionary.
 |  
 |  dump_info(self, dump=None, encoding='ascii')
 |      Dump all the PE header information into human readable string.
 |  
 |  dword_align(self, offset, base)
 |  
 |  full_load(self)
 |      Process the data directories.
 |      
 |      This method will load the data directories which might not have
 |      been loaded if the "fast_load" option was used.
 |  
 |  generate_checksum(self)
 |  
 |  get_bytes_from_data(self, offset, data)
 |      .
 |  
 |  get_data(self, rva=0, length=None)
 |      Get data regardless of the section where it lies on.
 |      
 |      Given a RVA and the size of the chunk to retrieve, this method
 |      will find the section where the data lies and return the data.
 |  
 |  get_data_from_dword(self, dword)
 |      Return a four byte string representing the double word value (little endian).
 |  
 |  get_data_from_qword(self, word)
 |      Return an eight byte string representing the quad-word value (little endian).
 |  
 |  get_data_from_word(self, word)
 |      Return a two byte string representing the word value. (little endian).
 |  
 |  get_dword_at_rva(self, rva)
 |      Return the double word value at the given RVA.
 |      
 |      Returns None if the value can't be read, i.e. the RVA can't be mapped
 |      to a file offset.
 |  
 |  get_dword_from_data(self, data, offset)
 |      Convert four bytes of data to a double word (little endian)
 |      
 |      'offset' is assumed to index into a dword array. So setting it to
 |      N will return a dword out of the data starting at offset N*4.
 |      
 |      Returns None if the data can't be turned into a double word.
 |  
 |  get_dword_from_offset(self, offset)
 |      Return the double word value at the given file offset. (little endian)
 |  
 |  get_imphash(self)
 |  
 |  get_import_table(self, rva, max_length=None, contains_addresses=False)
 |  
 |  get_memory_mapped_image(self, max_virtual_address=268435456, ImageBase=None)
 |      Returns the data corresponding to the memory layout of the PE file.
 |      
 |      The data includes the PE header and the sections loaded at offsets
 |      corresponding to their relative virtual addresses. (the VirtualAddress
 |      section header member).
 |      Any offset in this data corresponds to the absolute memory address
 |      ImageBase+offset.
 |      
 |      The optional argument 'max_virtual_address' provides with means of limiting
 |      which sections are processed.
 |      Any section with their VirtualAddress beyond this value will be skipped.
 |      Normally, sections with values beyond this range are just there to confuse
 |      tools. It's a common trick to see in packed executables.
 |      
 |      If the 'ImageBase' optional argument is supplied, the file's relocations
 |      will be applied to the image by calling the 'relocate_image()' method. Beware
 |      that the relocation information is applied permanently.
 |  
 |  get_offset_from_rva(self, rva)
 |      Get the file offset corresponding to this RVA.
 |      
 |      Given a RVA , this method will find the section where the
 |      data lies and return the offset within the file.
 |  
 |  get_overlay(self)
 |      Get the data appended to the file and not contained within the area described
 |      in the headers.
 |  
 |  get_overlay_data_start_offset(self)
 |      Get the offset of data appended to the file and not contained within
 |      the area described in the headers.
 |  
 |  get_physical_by_rva(self, rva)
 |      Gets the physical address in the PE file from an RVA value.
 |  
 |  get_qword_at_rva(self, rva)
 |      Return the quad-word value at the given RVA.
 |      
 |      Returns None if the value can't be read, i.e. the RVA can't be mapped
 |      to a file offset.
 |  
 |  get_qword_from_data(self, data, offset)
 |      Convert eight bytes of data to a word (little endian)
 |      
 |      'offset' is assumed to index into a word array. So setting it to
 |      N will return a dword out of the data starting at offset N*8.
 |      
 |      Returns None if the data can't be turned into a quad word.
 |  
 |  get_qword_from_offset(self, offset)
 |      Return the quad-word value at the given file offset. (little endian)
 |  
 |  get_resources_strings(self)
 |      Returns a list of all the strings found withing the resources (if any).
 |      
 |      This method will scan all entries in the resources directory of the PE, if
 |      there is one, and will return a [] with the strings.
 |      
 |      An empty list will be returned otherwise.
 |  
 |  get_rich_header_hash(self, algorithm='md5')
 |  
 |  get_rva_from_offset(self, offset)
 |      Get the RVA corresponding to this file offset.
 |  
 |  get_section_by_offset(self, offset)
 |      Get the section containing the given file offset.
 |  
 |  get_section_by_rva(self, rva)
 |      Get the section containing the given address.
 |  
 |  get_string_at_rva(self, rva, max_length=1048576)
 |      Get an ASCII string located at the given address.
 |  
 |  get_string_from_data(self, offset, data)
 |      Get an ASCII string from data.
 |  
 |  get_string_u_at_rva(self, rva, max_length=65536, encoding=None)
 |      Get an Unicode string located at the given address.
 |  
 |  get_warnings(self)
 |      Return the list of warnings.
 |      
 |      Non-critical problems found when parsing the PE file are
 |      appended to a list of warnings. This method returns the
 |      full list.
 |  
 |  get_word_at_rva(self, rva)
 |      Return the word value at the given RVA.
 |      
 |      Returns None if the value can't be read, i.e. the RVA can't be mapped
 |      to a file offset.
 |  
 |  get_word_from_data(self, data, offset)
 |      Convert two bytes of data to a word (little endian)
 |      
 |      'offset' is assumed to index into a word array. So setting it to
 |      N will return a dword out of the data starting at offset N*2.
 |      
 |      Returns None if the data can't be turned into a word.
 |  
 |  get_word_from_offset(self, offset)
 |      Return the word value at the given file offset. (little endian)
 |  
 |  has_relocs(self)
 |      Checks if the PE file has relocation directory
 |  
 |  is_dll(self)
 |      Check whether the file is a standard DLL.
 |      
 |      This will return true only if the image has the IMAGE_FILE_DLL flag set.
 |  
 |  is_driver(self)
 |      Check whether the file is a Windows driver.
 |      
 |      This will return true only if there are reliable indicators of the image
 |      being a driver.
 |  
 |  is_exe(self)
 |      Check whether the file is a standard executable.
 |      
 |      This will return true only if the file has the IMAGE_FILE_EXECUTABLE_IMAGE flag
 |      set and the IMAGE_FILE_DLL not set and the file does not appear to be a driver
 |      either.
 |  
 |  merge_modified_section_data(self)
 |      Update the PE image content with any individual section data that has been
 |      modified.
 |  
 |  normalize_import_va(self, va)
 |  
 |  parse_data_directories(self, directories=None, forwarded_exports_only=False, import_dllnames_only=False)
 |      Parse and process the PE file's data directories.
 |      
 |      If the optional argument 'directories' is given, only
 |      the directories at the specified indexes will be parsed.
 |      Such functionality allows parsing of areas of interest
 |      without the burden of having to parse all others.
 |      The directories can then be specified as:
 |      
 |      For export / import only:
 |      
 |        directories = [ 0, 1 ]
 |      
 |      or (more verbosely):
 |      
 |        directories = [ DIRECTORY_ENTRY['IMAGE_DIRECTORY_ENTRY_IMPORT'],
 |          DIRECTORY_ENTRY['IMAGE_DIRECTORY_ENTRY_EXPORT'] ]
 |      
 |      If 'directories' is a list, the ones that are processed will be removed,
 |      leaving only the ones that are not present in the image.
 |      
 |      If `forwarded_exports_only` is True, the IMAGE_DIRECTORY_ENTRY_EXPORT
 |      attribute will only contain exports that are forwarded to another DLL.
 |      
 |      If `import_dllnames_only` is True, symbols will not be parsed from
 |      the import table and the entries in the IMAGE_DIRECTORY_ENTRY_IMPORT
 |      attribute will not have a `symbols` attribute.
 |  
 |  parse_debug_directory(self, rva, size)
 |  
 |  parse_delay_import_directory(self, rva, size)
 |      Walk and parse the delay import directory.
 |  
 |  parse_directory_bound_imports(self, rva, size)
 |  
 |  parse_directory_load_config(self, rva, size)
 |  
 |  parse_directory_tls(self, rva, size)
 |  
 |  parse_exceptions_directory(self, rva, size)
 |      Parses exception directory
 |      
 |      All the code related to handling exception directories is documented in
 |      https://auscitte.github.io/systems%20blog/Exception-Directory-pefile#implementation-details
 |  
 |  parse_export_directory(self, rva, size, forwarded_only=False)
 |      Parse the export directory.
 |      
 |      Given the RVA of the export directory, it will process all
 |      its entries.
 |      
 |      The exports will be made available as a list of ExportData
 |      instances in the 'IMAGE_DIRECTORY_ENTRY_EXPORT' PE attribute.
 |  
 |  parse_import_directory(self, rva, size, dllnames_only=False)
 |      Walk and parse the import directory.
 |  
 |  parse_imports(self, original_first_thunk, first_thunk, forwarder_chain, max_length=None, contains_addresses=False)
 |      Parse the imported symbols.
 |      
 |      It will fill a list, which will be available as the dictionary
 |      attribute "imports". Its keys will be the DLL names and the values
 |      of all the symbols imported from that object.
 |  
 |  parse_relocations(self, data_rva, rva, size)
 |  
 |  parse_relocations_directory(self, rva, size)
 |  
 |  parse_resource_data_entry(self, rva)
 |      Parse a data entry from the resources directory.
 |  
 |  parse_resource_entry(self, rva)
 |      Parse a directory entry from the resources directory.
 |  
 |  parse_resources_directory(self, rva, size=0, base_rva=None, level=0, dirs=None)
 |      Parse the resources directory.
 |      
 |      Given the RVA of the resources directory, it will process all
 |      its entries.
 |      
 |      The root will have the corresponding member of its structure,
 |      IMAGE_RESOURCE_DIRECTORY plus 'entries', a list of all the
 |      entries in the directory.
 |      
 |      Those entries will have, correspondingly, all the structure's
 |      members (IMAGE_RESOURCE_DIRECTORY_ENTRY) and an additional one,
 |      "directory", pointing to the IMAGE_RESOURCE_DIRECTORY structure
 |      representing upper layers of the tree. This one will also have
 |      an 'entries' attribute, pointing to the 3rd, and last, level.
 |      Another directory with more entries. Those last entries will
 |      have a new attribute (both 'leaf' or 'data_entry' can be used to
 |      access it). This structure finally points to the resource data.
 |      All the members of this structure, IMAGE_RESOURCE_DATA_ENTRY,
 |      are available as its attributes.
 |  
 |  parse_rich_header(self)
 |      Parses the rich header
 |      see http://www.ntcore.com/files/richsign.htm for more information
 |      
 |      Structure:
 |      00 DanS ^ checksum, checksum, checksum, checksum
 |      10 Symbol RVA ^ checksum, Symbol size ^ checksum...
 |      ...
 |      XX Rich, checksum, 0, 0,...
 |  
 |  parse_sections(self, offset)
 |      Fetch the PE file sections.
 |      
 |      The sections will be readily available in the "sections" attribute.
 |      Its attributes will contain all the section information plus "data"
 |      a buffer containing the section's data.
 |      
 |      The "Characteristics" member will be processed and attributes
 |      representing the section characteristics (with the 'IMAGE_SCN_'
 |      string trimmed from the constant's names) will be added to the
 |      section instance.
 |      
 |      Refer to the SectionStructure class for additional info.
 |  
 |  parse_version_information(self, version_struct)
 |      Parse version information structure.
 |      
 |      The date will be made available in three attributes of the PE object.
 |      
 |      VS_VERSIONINFO   will contain the first three fields of the main structure:
 |          'Length', 'ValueLength', and 'Type'
 |      
 |      VS_FIXEDFILEINFO will hold the rest of the fields, accessible as sub-attributes:
 |          'Signature', 'StrucVersion', 'FileVersionMS', 'FileVersionLS',
 |          'ProductVersionMS', 'ProductVersionLS', 'FileFlagsMask', 'FileFlags',
 |          'FileOS', 'FileType', 'FileSubtype', 'FileDateMS', 'FileDateLS'
 |      
 |      FileInfo    is a list of all StringFileInfo and VarFileInfo structures.
 |      
 |      StringFileInfo structures will have a list as an attribute named 'StringTable'
 |      containing all the StringTable structures. Each of those structures contains a
 |      dictionary 'entries' with all the key / value version information string pairs.
 |      
 |      VarFileInfo structures will have a list as an attribute named 'Var' containing
 |      all Var structures. Each Var structure will have a dictionary as an attribute
 |      named 'entry' which will contain the name and value of the Var.
 |  
 |  print_info(self, encoding='utf-8')
 |      Print all the PE header information in a human readable from.
 |  
 |  relocate_image(self, new_ImageBase)
 |      Apply the relocation information to the image using the provided image base.
 |      
 |      This method will apply the relocation information to the image. Given the new
 |      base, all the relocations will be processed and both the raw data and the
 |      section's data will be fixed accordingly.
 |      The resulting image can be retrieved as well through the method:
 |      
 |          get_memory_mapped_image()
 |      
 |      In order to get something that would more closely match what could be found in
 |      memory once the Windows loader finished its work.
 |  
 |  set_bytes_at_offset(self, offset, data)
 |      Overwrite the bytes at the given file offset with the given string.
 |      
 |      Return True if successful, False otherwise. It can fail if the
 |      offset is outside the file's boundaries.
 |  
 |  set_bytes_at_rva(self, rva, data)
 |      Overwrite, with the given string, the bytes at the file offset corresponding
 |      to the given RVA.
 |      
 |      Return True if successful, False otherwise. It can fail if the
 |      offset is outside the file's boundaries.
 |  
 |  set_data_bytes(self, offset: int, data: bytes)
 |  
 |  set_dword_at_offset(self, offset, dword)
 |      Set the double word value at the given file offset.
 |  
 |  set_dword_at_rva(self, rva, dword)
 |      Set the double word value at the file offset corresponding to the given RVA.
 |  
 |  set_qword_at_offset(self, offset, qword)
 |      Set the quad-word value at the given file offset.
 |  
 |  set_qword_at_rva(self, rva, qword)
 |      Set the quad-word value at the file offset corresponding to the given RVA.
 |  
 |  set_word_at_offset(self, offset, word)
 |      Set the word value at the given file offset.
 |  
 |  set_word_at_rva(self, rva, word)
 |      Set the word value at the file offset corresponding to the given RVA.
 |  
 |  show_warnings(self)
 |      Print the list of warnings.
 |      
 |      Non-critical problems found when parsing the PE file are
 |      appended to a list of warnings. This method prints the
 |      full list to standard output.
 |  
 |  trim(self)
 |      Return the just data defined by the PE headers, removing any overlaid data.
 |  
 |  verify_checksum(self)
 |  
 |  write(self, filename=None)
 |      Write the PE file.
 |      
 |      This function will process all headers and components
 |      of the PE file and include all changes made (by just
 |      assigning to attributes in the PE objects) and write
 |      the changes back to a file whose name is provided as
 |      an argument. The filename is optional, if not
 |      provided the data will be returned as a 'str' object.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __IMAGE_BASE_RELOCATION_ENTRY_format__ = ('IMAGE_BASE_RELOCATION_ENTRY...
 |  
 |  __IMAGE_BASE_RELOCATION_format__ = ('IMAGE_BASE_RELOCATION', ('I,Virtu...
 |  
 |  __IMAGE_BOUND_FORWARDER_REF_format__ = ('IMAGE_BOUND_FORWARDER_REF', (...
 |  
 |  __IMAGE_BOUND_IMPORT_DESCRIPTOR_format__ = ('IMAGE_BOUND_IMPORT_DESCRI...
 |  
 |  __IMAGE_DATA_DIRECTORY_format__ = ('IMAGE_DATA_DIRECTORY', ('I,Virtual...
 |  
 |  __IMAGE_DEBUG_DIRECTORY_format__ = ('IMAGE_DEBUG_DIRECTORY', ('I,Chara...
 |  
 |  __IMAGE_DELAY_IMPORT_DESCRIPTOR_format__ = ('IMAGE_DELAY_IMPORT_DESCRI...
 |  
 |  __IMAGE_DOS_HEADER_format__ = ('IMAGE_DOS_HEADER', ('H,e_magic', 'H,e_...
 |  
 |  __IMAGE_EXPORT_DIRECTORY_format__ = ('IMAGE_EXPORT_DIRECTORY', ('I,Cha...
 |  
 |  __IMAGE_FILE_HEADER_format__ = ('IMAGE_FILE_HEADER', ('H,Machine', 'H,...
 |  
 |  __IMAGE_IMPORT_DESCRIPTOR_format__ = ('IMAGE_IMPORT_DESCRIPTOR', ('I,O...
 |  
 |  __IMAGE_LOAD_CONFIG_DIRECTORY64_format__ = ('IMAGE_LOAD_CONFIG_DIRECTO...
 |  
 |  __IMAGE_LOAD_CONFIG_DIRECTORY_format__ = ('IMAGE_LOAD_CONFIG_DIRECTORY...
 |  
 |  __IMAGE_NT_HEADERS_format__ = ('IMAGE_NT_HEADERS', ('I,Signature',))
 |  
 |  __IMAGE_OPTIONAL_HEADER64_format__ = ('IMAGE_OPTIONAL_HEADER64', ('H,M...
 |  
 |  __IMAGE_OPTIONAL_HEADER_format__ = ('IMAGE_OPTIONAL_HEADER', ('H,Magic...
 |  
 |  __IMAGE_RESOURCE_DATA_ENTRY_format__ = ('IMAGE_RESOURCE_DATA_ENTRY', (...
 |  
 |  __IMAGE_RESOURCE_DIRECTORY_ENTRY_format__ = ('IMAGE_RESOURCE_DIRECTORY...
 |  
 |  __IMAGE_RESOURCE_DIRECTORY_format__ = ('IMAGE_RESOURCE_DIRECTORY', ('I...
 |  
 |  __IMAGE_SECTION_HEADER_format__ = ('IMAGE_SECTION_HEADER', ('8s,Name',...
 |  
 |  __IMAGE_THUNK_DATA64_format__ = ('IMAGE_THUNK_DATA', ('Q,ForwarderStri...
 |  
 |  __IMAGE_THUNK_DATA_format__ = ('IMAGE_THUNK_DATA', ('I,ForwarderString...
 |  
 |  __IMAGE_TLS_DIRECTORY64_format__ = ('IMAGE_TLS_DIRECTORY', ('Q,StartAd...
 |  
 |  __IMAGE_TLS_DIRECTORY_format__ = ('IMAGE_TLS_DIRECTORY', ('I,StartAddr...
 |  
 |  __RUNTIME_FUNCTION_format__ = ('RUNTIME_FUNCTION', ('I,BeginAddress', ...
 |  
 |  __StringFileInfo_format__ = ('StringFileInfo', ('H,Length', 'H,ValueLe...
 |  
 |  __StringTable_format__ = ('StringTable', ('H,Length', 'H,ValueLength',...
 |  
 |  __String_format__ = ('String', ('H,Length', 'H,ValueLength', 'H,Type')...
 |  
 |  __VS_FIXEDFILEINFO_format__ = ('VS_FIXEDFILEINFO', ('I,Signature', 'I,...
 |  
 |  __VS_VERSIONINFO_format__ = ('VS_VERSIONINFO', ('H,Length', 'H,ValueLe...
 |  
 |  __Var_format__ = ('Var', ('H,Length', 'H,ValueLength', 'H,Type'))
